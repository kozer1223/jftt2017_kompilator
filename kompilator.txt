TODO:
wszystko

CO MOŻE POJŚĆ NIE TAK:
wszystko
iteratory (na razie działają bo nie ma zaimplementowanych bloków)
z powodu label end moze byc kilka labeli dla jednej instrukcji!!!!

PAMIĘĆ:
- adresy zmiennych (symboli)
- adresy tablic + wskaźniki tablic
- iteratory
- stałe
- pamięć lokalna (tymczasowa dla bloków)

allocateSymbols(); //zmienne + tablice
allocateIterators();
allocateConstants();
 <- global memory allocated = true
block->memory.allocate();

KOD TRóJADRESOWY:
(label label)
read a
write a
a := b
a := b + c
a := b - c
a := b * c
a := b / c
a := b % c
goto label
if a == 0 goto label
if a odd goto label
halt
a++
a--
a*=2
a/=2

DIV/MOD

LOAD a
STORE r
ZERO
STORE q
LOAD b
JZERO endloop
STORE t
shiftt	LOAD a
SUB t
JZERO divloop
LOAD t
SHL
STORE t
JUMP shiftt
divloop	LOAD t
INC
SUB b
JZERO endloop
LOAD t
SUB r
JZERO rbigger
LOAD q
SHL
STORE q
LOAD t
SHR
STORE t
JUMP divloop
rbigger	LOAD q
SHL
INC
STORE q
LOAD r
SUB t
STORE r
LOAD t
SHR
STORE t
JUMP divloop
endloop LOAD q
PUT
LOAD r
PUT
HALT

 modulo

 GET
STORE b
GET
STORE c

LOAD b
STORE tmp
ZERO
STORE a
INC
STORE p
LOAD tmp
loop	JZERO end
JODD ifodd
LOAD p
SHL
STORE p
INC
SUB c
JZERO skip1
DEC
STORE p
skip1	LOAD tmp
SHR
STORE tmp
JUMP loop
ifodd	LOAD a
ADD p
STORE a
INC
SUB c
JZERO skip2
DEC
STORE a
skip2	LOAD p
SHL
STORE p
INC
SUB c
JZERO skip3
DEC
STORE p
skip3	LOAD tmp
SHR
STORE tmp
JUMP loop
end	LOAD a
PUT
HALT

FOR UPTO

i = a
tmp = b + 1 - a
while tmp > 0
 (block)
 i++
 tmp--
endwhile

FOR DOWNTO

i = a
tmp = a + 1 - b  // tmp = a - (b-1)
while tmp > 0
 (block)
 i--
 tmp--
endwhile

optymalizacje:

- wyżyłowac mnożenie dzielenie modulo i ogolnie wszystko
- optymalizacja warunku x > 0 (nie zapisuj zmiennej tymczasowej)
- w forach nie optymalizacja wczytywania zmiennej tymczasowej

NEW DIV
LOAD a
STORE r
ZERO
STORE q
LOAD b
STORE t
---
LOAD a		: shiftloop
SUB t
JZERO shiftend
LOAD t
SHL
STORE t
JUMP shiftloop
---
LOAD t		: shiftend
INC		: divloop
SUB b
JZERO end
LOAD r
INC
SUB t
JZERO rsmaller
DEC
STORE r
LOAD q
SHL
INC
STORE q
LOAD t
SHR
STORE t
JUMP divloop
LOAD q		: rsmaller
SHL
STORE q
LOAD t
SHR
STORE t
JUMP divloop
		: end

  - mod ---
  LOAD a
  STORE r
  LOAD b
  STORE t
  ---
  LOAD a		: shiftloop
  SUB t
  JZERO shiftend
  LOAD t
  SHL
  STORE t
  JUMP shiftloop
  ---
  LOAD t		: shiftend
  INC		: divloop
  SUB b
  JZERO end
  LOAD r
  INC
  SUB t
  JZERO rsmaller
  DEC
  STORE r
  LOAD t
  SHR
  STORE t
  JUMP divloop
  LOAD t		: rsmaller
  SHR
  STORE t
  JUMP divloop
  		: end
